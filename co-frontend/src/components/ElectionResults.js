import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useEffect, useState } from 'react';
import { api } from '../lib/api';
export function ElectionResults({ contractAddress, onClose }) {
    const [resultsData, setResultsData] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    useEffect(() => {
        fetchResults();
    }, [contractAddress]);
    const fetchResults = async () => {
        try {
            setLoading(true);
            const { data } = await api.get(`/election/${contractAddress}/results`);
            setResultsData(data.data);
        }
        catch (err) {
            setError(err.response?.data?.message || 'Failed to load results');
        }
        finally {
            setLoading(false);
        }
    };
    if (loading) {
        return (_jsxs("div", { className: "flex items-center justify-center p-8", children: [_jsx("div", { className: "animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600" }), _jsx("span", { className: "ml-2", children: "Loading results..." })] }));
    }
    if (error) {
        return (_jsxs("div", { className: "text-center p-8", children: [_jsxs("div", { className: "text-red-600 mb-4", children: ["\u274C ", error] }), _jsx("button", { onClick: fetchResults, className: "px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700", children: "Try Again" })] }));
    }
    if (!resultsData) {
        return _jsx("div", { className: "text-center p-8", children: "No results available" });
    }
    const { election, winner, detailedResults } = resultsData;
    return (_jsxs("div", { className: "max-w-4xl mx-auto p-6 bg-white rounded-lg shadow-lg", children: [_jsxs("div", { className: "flex justify-between items-start mb-6", children: [_jsxs("div", { children: [_jsx("h2", { className: "text-2xl font-bold text-gray-900", children: election.title }), _jsxs("p", { className: "text-gray-600 capitalize", children: [election.electionType, " Election Results"] }), _jsxs("p", { className: "text-sm text-gray-500", children: ["Results announced: ", new Date(election.resultsAnnouncedAt).toLocaleDateString()] })] }), onClose && (_jsx("button", { onClick: onClose, className: "text-gray-500 hover:text-gray-700 text-xl font-bold", children: "\u00D7" }))] }), _jsxs("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-4 mb-8 p-4 bg-gray-50 rounded-lg", children: [_jsxs("div", { className: "text-center", children: [_jsx("div", { className: "text-2xl font-bold text-blue-600", children: election.totalRegisteredVoters }), _jsx("div", { className: "text-sm text-gray-600", children: "Registered Voters" })] }), _jsxs("div", { className: "text-center", children: [_jsx("div", { className: "text-2xl font-bold text-green-600", children: election.totalVotesCast }), _jsx("div", { className: "text-sm text-gray-600", children: "Votes Cast" })] }), _jsxs("div", { className: "text-center", children: [_jsxs("div", { className: "text-2xl font-bold text-purple-600", children: [election.turnoutPercentage.toFixed(1), "%"] }), _jsx("div", { className: "text-sm text-gray-600", children: "Turnout" })] }), _jsxs("div", { className: "text-center", children: [_jsx("div", { className: "text-2xl font-bold text-orange-600", children: winner.votesReceived }), _jsx("div", { className: "text-sm text-gray-600", children: "Winning Votes" })] })] }), detailedResults.length > 0 && (_jsx("div", { className: "mb-8 p-6 bg-gradient-to-r from-green-50 to-blue-50 border-l-4 border-green-500 rounded-lg shadow-md", children: _jsxs("div", { className: "flex items-center", children: [_jsx("div", { className: "text-3xl mr-4", children: "\uD83C\uDFC6" }), _jsxs("div", { children: [_jsx("h3", { className: "text-xl font-bold text-gray-800", children: "Winner" }), _jsxs("p", { className: "text-lg font-semibold text-gray-900", children: [detailedResults[0].name || `Candidate ${detailedResults[0].candidateId}`, detailedResults[0].party && (_jsxs("span", { className: "ml-2 text-sm text-gray-700", children: ["(", detailedResults[0].party, ")"] }))] }), _jsxs("p", { className: "text-sm font-medium text-gray-700", children: [detailedResults[0].votesReceived, " votes (", detailedResults[0].percentage.toFixed(1), "%)"] })] })] }) })), _jsx("div", { className: "overflow-x-auto", children: _jsxs("table", { className: "w-full border-collapse border border-gray-300 shadow-sm", children: [_jsx("thead", { children: _jsxs("tr", { className: "bg-gray-800 text-white", children: [_jsx("th", { className: "border border-gray-300 px-4 py-3 text-left font-semibold", children: "Position" }), _jsx("th", { className: "border border-gray-300 px-4 py-3 text-left font-semibold", children: "Candidate" }), _jsx("th", { className: "border border-gray-300 px-4 py-3 text-left font-semibold", children: "Party" }), _jsx("th", { className: "border border-gray-300 px-4 py-3 text-center font-semibold", children: "Votes" }), _jsx("th", { className: "border border-gray-300 px-4 py-3 text-center font-semibold", children: "Percentage" })] }) }), _jsx("tbody", { children: detailedResults.map((result, index) => (_jsxs("tr", { className: `${index === 0 ? 'bg-green-50 border-l-4 border-l-green-500' : 'hover:bg-gray-50'} transition-colors duration-200`, children: [_jsx("td", { className: "border border-gray-300 px-4 py-3", children: _jsxs("div", { className: "flex items-center", children: [index === 0 && _jsx("span", { className: "mr-2", children: "\uD83E\uDD47" }), index === 1 && _jsx("span", { className: "mr-2", children: "\uD83E\uDD48" }), index === 2 && _jsx("span", { className: "mr-2", children: "\uD83E\uDD49" }), _jsxs("span", { className: "font-medium text-gray-800", children: ["#", result.position] })] }) }), _jsxs("td", { className: "border border-gray-300 px-4 py-3", children: [_jsx("div", { className: "font-semibold text-gray-900", children: result.name || `Candidate ${result.candidateId}` }), result.candidateAddress && (_jsxs("div", { className: "text-xs text-gray-600 font-mono mt-1", children: [result.candidateAddress.slice(0, 6), "...", result.candidateAddress.slice(-4)] }))] }), _jsx("td", { className: "border border-gray-300 px-4 py-3 text-gray-800", children: result.party || '-' }), _jsx("td", { className: "border border-gray-300 px-4 py-3 text-center", children: _jsx("span", { className: "font-bold text-gray-900 text-lg", children: result.votesReceived }) }), _jsx("td", { className: "border border-gray-300 px-4 py-3 text-center", children: _jsxs("div", { className: "flex items-center", children: [_jsx("div", { className: "flex-1", children: _jsx("div", { className: "bg-gray-200 rounded-full h-3 mr-2", children: _jsx("div", { className: `h-3 rounded-full transition-all duration-500 ${index === 0 ? 'bg-green-500' :
                                                                index === 1 ? 'bg-blue-500' :
                                                                    index === 2 ? 'bg-orange-500' : 'bg-gray-500'}`, style: { width: `${result.percentage}%` } }) }) }), _jsxs("span", { className: "font-semibold ml-2 text-gray-900", children: [result.percentage.toFixed(1), "%"] })] }) })] }, result.candidateId))) })] }) }), _jsxs("div", { className: "mt-6 p-4 bg-gray-50 rounded-lg text-center text-sm", children: [_jsxs("p", { className: "text-gray-700 font-medium", children: ["Election Contract:", _jsx("span", { className: "font-mono ml-1 text-gray-900", children: election.contractAddress })] }), _jsxs("p", { className: "text-gray-700 font-medium mt-1", children: ["Status:", _jsx("span", { className: "ml-1 px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs font-semibold uppercase", children: election.status.replace('_', ' ') })] })] })] }));
}
